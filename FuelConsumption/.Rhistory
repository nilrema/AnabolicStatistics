setwd("C:/Users/Korisnik/Desktop/SAPp/AnabolicStatistics/FuelConsumption")
knitr::opts_chunk$set(echo = TRUE)
continents = unique(data$continent) #lista svih kontinenta
knitr::opts_chunk$set(echo = TRUE)
path <- "car_specifications.csv"
data <- read.csv(path)
data$continent = as.factor(data$continent)
data$country = as.factor(data$country)
head(data)
require(nortest) #potrebna biblioteka
lillie.test(data$city.L.100km)
lillie.test(data$highway.L.100km)
#hist za svaki test
hist(data$city.L.100km)
hist(data$highway.L.100km)
#qq #probaj koristit i za anovu!!!!
qqnorm(data$city.L.100km)
qqline(data$city.L.100km)
qqnorm(data$highway.L.100km)
qqline(data$highway.L.100km)
continents = unique(data$continent) #lista svih kontinenta
for (continent in continents) {
print(paste("For continent:",continent))
print(lillie.test(data$city.L.100km[data$continent == continent]))
print(lillie.test(data$highway.L.100km[data$continent == continent]))
}
knitr::opts_chunk$set(echo = TRUE)
# Testiranje homogenosti varijance uzoraka Bartlettovim testom
bartlett.test(creditdata$income ~ creditdata$education)
knitr::opts_chunk$set(echo = TRUE)
# Ucitavanje podataka
creditdata = read.csv('creditdata.csv')
summary(creditdata)
# Priprema podataka
creditdata$education = factor(creditdata$education,levels = c(1,2,3),labels = c('elementary','secondary','university'))
creditdata$marriage = factor(creditdata$marriage,levels = c(1,2),labels = c('single','married'))
creditdata$apartment = factor(creditdata$apartment,levels = c(1,2),labels = c('rent','own'))
creditdata$default = factor(creditdata$default,levels = c(0,1),labels = c(FALSE,TRUE))
summary(creditdata)
require(nortest)
lillie.test(creditdata$income)
lillie.test(creditdata$income[creditdata$education=='elementary'])
lillie.test(creditdata$income[creditdata$education=='secondary'])
lillie.test(creditdata$income[creditdata$education=='university'])
hist(creditdata$income[creditdata$education=='elementary'])
hist(creditdata$income[creditdata$education=='secondary'])
hist(creditdata$income[creditdata$education=='university'])
require(nortest) #potrebna biblioteka
lillie.test(data$city.L.100km)
lillie.test(data$highway.L.100km)
continents = unique(data$continent) #lista svih kontinenta
for (continent in continents) {
print(paste("For continent:",continent))
print(lillie.test(data$city.L.100km[data$continent == continent]))
print(lillie.test(data$highway.L.100km[data$continent == continent]))
}
continents = unique(data$continent) #lista svih kontinenta
for (continent in continents) {
print(paste("For continent:",continent))
print(lillie.test(data$city.L.100km[data$continent == continent]))
print(lillie.test(data$highway.L.100km[data$continent == continent]))
hist(data$highway.L.100km[data$continent == continent])
hist(data$city.L.100km[data$continent == continent])
}
for (continent in continents) {
countHighway = sum(data$highway.L.100km[data$continent == continent])
countCity = sum(data$city.L.100km[data$continent == continent])
print("Highway data for", continent, ":",countHighway)
print("City data for", continent, ":",countCity)
}
for (continent in continents) {
countHighway = sum(data$highway.L.100km[data$continent == continent])
countCity = sum(data$city.L.100km[data$continent == continent])
sprintf("Highway data for %s: %d",continent,countHighway)
print("City data for %s: %d",continent,countCity)
}
for (continent in continents) {
countHighway = sum(data$highway.L.100km[data$continent == continent])
countCity = sum(data$city.L.100km[data$continent == continent])
sprintf("Highway data for %s: %f",continent,countHighway)
print("City data for %s: %f",continent,countCity)
}
for (continent in continents) {
countHighway = sum(data$highway.L.100km[data$continent == continent])
countCity = sum(data$city.L.100km[data$continent == continent])
sprintf("Highway data for %s: %d",continent,countHighway)
sprintf("City data for %s: %d",continent,countCity)
}
for (continent in continents) {
countHighway = sum(data$highway.L.100km[data$continent == continent])
countCity = sum(data$city.L.100km[data$continent == continent])
sprintf("Highway data for %s: %f",continent,countHighway)
sprintf("City data for %s: %f",continent,countCity)
}
for (continent in continents) {
countHighway = sum(data$highway.L.100km[data$continent == continent])
countCity = sum(data$city.L.100km[data$continent == continent])
print(paste("Highway count for",continent,": ",countHighway))
print(paste("City count for",continent,": ",countCity))
}
for (continent in continents) {
countHighway = count(data$highway.L.100km[data$continent == continent])
countCity = count(data$city.L.100km[data$continent == continent])
print(paste("Highway count for",continent,": ",countHighway))
print(paste("City count for",continent,": ",countCity))
}
for (continent in continents) {
countHighway = table(data$highway.L.100km[data$continent == continent])
countCity = table(data$city.L.100km[data$continent == continent])
print(paste("Highway count for",continent,": ",countHighway))
print(paste("City count for",continent,": ",countCity))
}
chisq = chisq.test(data)
filteredDataHighway = list(Group1 = data$highway.L.100km[continent == "Asia"], Group2 = data$highway.L.100km[continent == "North America"], Group3 = data$highway.L.100km[continent == "Europe"])
filteredDataCity = list(Group1 = data$city.L.100km[continent == "Asia"], Group2 = data$city.L.100km[continent == "North America"], Group3 = data$city.L.100km[continent == "Europe"])
kruskalHighway = kruskal.test(filteredDataHighway)
filteredDataHighway = list(Group1 = data$highway.L.100km[data$continent == "Asia"], Group2 = data$highway.L.100km[data$continentcontinent == "North America"], Group3 = data$highway.L.100km[data$continentcontinent == "Europe"])
filteredDataCity = list(Group1 = data$city.L.100km[data$continentcontinent == "Asia"], Group2 = data$city.L.100km[data$continentcontinent == "North America"], Group3 = data$city.L.100km[data$continentcontinent == "Europe"])
kruskalHighway = kruskal.test(filteredDataHighway)
filteredDataHighway = list(Group1 = data$highway.L.100km[data$continent == "Asia"], Group2 = data$highway.L.100km[data$continentcontinent == "North America"], Group3 = data$highway.L.100km[data$continentcontinent == "Europe"])
filteredDataCity = list(Group1 = data$city.L.100km[data$continentcontinent == "Asia"], Group2 = data$city.L.100km[data$continentcontinent == "North America"], Group3 = data$city.L.100km[data$continentcontinent == "Europe"])
kruskalHighway = kruskal.test(filteredDataHighway)
filteredDataHighway = list(Group1 = data$highway.L.100km[data$continent == "Asia"], Group2 = data$highway.L.100km[data$continent == "North America"], Group3 = data$highway.L.100km[data$continent == "Europe"])
filteredDataCity = list(Group1 = data$city.L.100km[data$continent == "Asia"], Group2 = data$city.L.100km[data$continent == "North America"], Group3 = data$city.L.100km[data$continent == "Europe"])
kruskalHighway = kruskal.test(filteredDataHighway)
kruskalCity = kruskal.test((filteredDataCity))
print(kruskalHighway)
print(kruskalCity)
print(kruskalCity)
boxplot(filteredDataHighway)
filteredDataHighway = list(Asia_Highway = data$highway.L.100km[data$continent == "Asia"], NA_Highway = data$highway.L.100km[data$continent == "North America"], Europe_Highway = data$highway.L.100km[data$continent == "Europe"])
filteredDataCity = list(Asia_City = data$city.L.100km[data$continent == "Asia"], NA_City = data$city.L.100km[data$continent == "North America"], Europe_City = data$city.L.100km[data$continent == "Europe"])
kruskalHighway = kruskal.test(filteredDataHighway)
kruskalCity = kruskal.test((filteredDataCity))
print(kruskalHighway)
boxplot(filteredDataHighway)
boxplot(filteredDataHighway)
boxplot(filteredDataCity)
require(dunn.test)
dunn = dunn.test
print(dunn)
require(dunn.test)
dunn = dunn.test(data$highway.L.100km,g = data$continent,method="bonferroni")
print(dunn)
require(dunn.test)
dunn = dunn.test(data$highway.L.100km,g = data$continent,method="bonferroni")
print(dunn)
knitr::opts_chunk$set(echo = TRUE)
qqnorm(data$highway.L.100km[data$continent == "Asia"],main="Asia, highways")
qqline(data$highway.L.100km[data$continent == "Asia"])
qqnorm(data$city.L.100km[data$continent == "Asia"],main = "Asia, cities")
qqline(data$city.L.100km[data$continent == "Asia"])
qqnorm(data$highway.L.100km[data$continent == "North America"],main = "NA,highways")
qqline(data$highway.L.100km[data$continent == "North America"])
qqnorm(data$city.L.100km[data$continent == "North America"],main = "NA, cities")
qqline(data$city.L.100km[data$continent == "North America"])
qqnorm(data$highway.L.100km[data$continent == "Europe"],main = "Europe, highways")
qqline(data$highway.L.100km[data$continent == "Europe"])
qqnorm(data$city.L.100km[data$continent == "Europe"],main = "Europe, cities")
qqline(data$city.L.100km[data$continent == "Europe"])
library(tidyverse)
library(lubridate)
knitr::opts_chunk$set(echo = TRUE)
knitr::opts_chunk$set(results = 'hold')
# Q-Q plot for atmosferski motori
qqnorm(atmosferski_motori$compression.ratio, main = "Q-Q Plot - Compression Ratio - Atmosferski motori", col = "blue")
