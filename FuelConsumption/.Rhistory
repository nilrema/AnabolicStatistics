mean(irisdata$Petal.Length, trim=0.2)
median(irisdata$Petal.Length)
mfv(irisdata$Petal.Length)
require(modeest)
require(modeest)
require(modeest)
mfv(irisdata$Petal.Length)
require(modeest)
help(var)
var(irisdata$Petal.Length)
sd(irisdata$Petal.Length)
sqrt(var(irisdata$Petal.Length))
summary(irisdata)
library(tidyverse)
library(tidyverse)
library(dplyr)
library(tidyverse)
library(dplyr)
irisdata %>% group_by(Species) %>% summarise(
Mean.Sep.Len = mean(Sepal.Length),
Mean.Pet.Len = mean(Petal.Length),
Mean.Sep.Wid = mean(Sepal.Width),
Mean.Pet.Wid = mean(Petal.Width)
) -> summary.result1
summary.result1
irisdata %>% group_by(Species) %>% summarise(
Mean.Sep.Len = mean(Sepal.Length),
Mean.Pet.Len = mean(Petal.Length),
Mean.Sep.Wid = mean(Sepal.Width),
Mean.Pet.Wid = mean(Petal.Width)
) -> ass
ass
# Pomoću summary-ja statistike za pojedinu vrstu:
summary(irisdata[irisdata["Species"] == c("setosa"),])
summary(irisdata[irisdata["Species"] == c("versicolor"),])
summary(irisdata[irisdata["Species"] == c("virginica"),])
h = hist(irisdata$Sepal.Length,
breaks=3,
main="Sepal length histogram, breaks = 3",
xlab="Sepal length [cm]",
ylab='Frequency',
col="blue"
)
h = hist(irisdata$Sepal.Length,
breaks=100,
main="Sepal length histogram, breaks = 100",
xlab="Sepal length [cm]",
ylab='Frequency',
col="blue"
)
h = hist(irisdata$Sepal.Length,
main="Sepal length histogram, breaks = ?",
xlab="Sepal length [cm]",
ylab='Frequency',
col="blue"
)
abline(v = mean(irisdata$Sepal.Length), col = "red", lwd = 4)
# Možemo li iz ovog histograma isčitati da se radi o multimodalnoj distribuciji?
```
h = hist(irisdata$Sepal.Length,
breaks=3,
main="Sepal length histogram, breaks = 3",
xlab="Sepal length [cm]",
ylab='Frequency',
col="blue"
)
h = hist(irisdata$Sepal.Length,
breaks=3,
main="Sepal length histogram, breaks = 13",
xlab="Sepal length [cm]",
ylab='Frequency',
col="blue"
)
h = hist(irisdata$Sepal.Length,
breaks=13,
main="Sepal length histogram, breaks = 13",
xlab="Sepal length [cm]",
ylab='Frequency',
col="blue"
)
h = hist(irisdata$Sepal.Length,
breaks=100,
main="Sepal length histogram, breaks = 100",
xlab="Sepal length [cm]",
ylab='Frequency',
col="blue"
)
h = hist(irisdata$Sepal.Length,
main="Sepal length histogram, breaks = ?",
xlab="Sepal length [cm]",
ylab='Frequency',
col="blue"
)
h = hist(irisdata$Sepal.Length,
breaks=13,
main="Sepal length histogram, breaks = 13",
xlab="Sepal length [cm]",
ylab='Frequency',
col="blue"
)
h = hist(irisdata$Sepal.Length,
breaks=3,
main="Sepal length histogram, breaks = 3",
xlab="Sepal length [cm]",
ylab='Frequency',
col="blue"
)
h = hist(irisdata$Sepal.Length,
main="Sepal length histogram, breaks = ?",
xlab="Sepal length [cm]",
ylab='Frequency',
col="blue"
)
h = hist(irisdata$Sepal.Length,
main="Sepal length histogram, breaks = ?",
xlab="Sepal length [cm]",
ylab='Frequency',
col="blue"
)
abline(v = mean(irisdata$Sepal.Length), col = "red", lwd = 4)
h = hist(irisdata$Sepal.Length,
main="Sepal length histogram, breaks = ?",
xlab="Sepal length [cm]",
ylab='Frequency',
col="blue"
)
abline(v = mean(irisdata$Sepal.Length), col = "red", lwd = 4)
h = hist(irisdata$Petal.Length,
main="Petal length histogram",
xlab="Petal length [cm]",
ylab='Frequency',
ylim= c(0,40)
)
mfv(irisdata$Petal.Length)
h = hist(irisdata$Sepal.Length,
breaks=15,
main="Sepal length histogram, breaks = 15",
xlab="Sepal length [cm]",
ylab='Frequency',
col="lightblue"
)
# Histogram duljine lapa s cca. 15 razreda (broj razreda shvaca kao "sugestiju")
# Kako možemo doći do breakpoint-ova:
h$breaks
length(h$breaks)
b = seq(min(irisdata$Sepal.Length) - 0.1,max(irisdata$Sepal.Length) + 0.1,0.2)
length(b)
h = hist(irisdata$Sepal.Length,
breaks=b,
main="Sepal length histogram",
xlab="Sepal length [cm]",
ylab='Frequency',
col="lightblue"
)
# Broj razreda i frekvencije:
length(h$breaks)
h$counts
data.counts = h$counts
barplot(data.counts,
main="Sepal length histogram",
xlab="Sepal length [cm]",
ylab='Frequency',
col="pink")
data.counts = h$density
barplot(data.counts,
main="Sepal length histogram",
xlab="Sepal length [cm]",
ylab='Frequency',
col="pink")
h = hist(irisdata$Sepal.Length,
breaks=b,
main="Sepal length histogram",
xlab="Sepal length [cm]",
ylab='Frequency',
col="lightblue"
)
# Broj razreda i frekvencije:
length(h$breaks)
h$counts
data <- t(cbind(h1$counts,h2$counts,h3$counts))
b = seq(min(irisdata$Sepal.Length) - 0.1,max(irisdata$Sepal.Length) + 0.1,0.2)
h1 = hist(irisdata[irisdata["Species"] == c("setosa"),]$Sepal.Length,
breaks=b,
plot=FALSE)
h2 = hist(irisdata[irisdata["Species"] == c("versicolor"),]$Sepal.Length,
breaks=b,
plot=FALSE)
h3 = hist(irisdata[irisdata["Species"] == c("virginica"),]$Sepal.Length,
breaks=b,
plot=FALSE)
data <- t(cbind(h1$counts,h2$counts,h3$counts))
data
barplot(data,beside=TRUE, col=c("lightblue", "purple", "lightgreen"), xlab="Sepal length [cm]", ylab='Frequency',)
legend("topleft",c("setosa","versicolor","virginica"),fill = c("lightblue", "purple", "lightgreen"))
boxplot(irisdata[irisdata["Species"]=="versicolor",]$Sepal.Length,
main='Sepal length box-plot',
ylab='Sepal length [cm]')
# Vrijednosti pravokutnog dijagrama dolaze iz deskriptivne statistike:
summary(irisdata[irisdata["Species"]=="versicolor",]$Sepal.Length)
iris.modif = read.table("iris_mod.txt")
head(iris.modif)
```
plot(irisdata$Petal.Length[irisdata$Species=='setosa'],
irisdata$Petal.Width[irisdata$Species=='setosa'],
col='blue',
xlim=c(min(irisdata$Petal.Length),max(irisdata$Petal.Length)),
ylim=c(min(irisdata$Petal.Width),max(irisdata$Petal.Width)),
xlab='Petal length [cm]',
ylab='Petal width [cm]')
points(irisdata$Petal.Length[irisdata$Species=='versicolor'],
irisdata$Petal.Width[irisdata$Species=='versicolor'],col='red')
points(irisdata$Petal.Length[irisdata$Species=='virginica'],
irisdata$Petal.Width[irisdata$Species=='virginica'],col='green')
q()
a= 1
a
local({fn<-choose.files(filters=Filters[c('R','txt','All'),],index=4)
file.show(fn,header=fn,title='')})
path
path <- "C:/Users/Ivan/Desktop/5sem/sap/SAPproj/car_specifications.csv"
path
car_data
path <- "C:/Users/Ivan/Desktop/5sem/sap/SAPproj/car_specifications.csv"
car_data <- read.csv(path)
car_Data
car_data
car_data$city.L.100km
car_data$fuel
data
path <- "C:/Users/Ivan/Desktop/5sem/sap/SAPproj/car_specifications.csv"
data <- read.csv(path)
data$make <- as.factor(data$make)
data$aspiration <- as.factor(data$aspiration)
data$num_of_doors <- as.factor(data$num_of_doors)
data$body_style <- as.factor(data$body_style)
data$drive_wheels <- as.factor(data$drive_wheels)
data$engine_location <- as.factor(data$engine_location)
data$fuel <- as.factor(data$fuel)
data$city.L.100km <- as.factor(data$city.L.100km)
data$highway.L.100km <- as.factor(data$highway.L.100km)
data$country <- as.factor(data$country)
data$continent <- as.factor(data$continent)
model <- anova(data$)
path <- "C:/Users/Ivan/Desktop/5sem/sap/SAPproj/car_specifications.csv"
data <- read.csv(path)
data$make <- as.factor(data$make)
data$aspiration <- as.factor(data$aspiration)
data$num_of_doors <- as.factor(data$num_of_doors)
data$body_style <- as.factor(data$body_style)
data$drive_wheels <- as.factor(data$drive_wheels)
data$engine_location <- as.factor(data$engine_location)
data$fuel <- as.factor(data$fuel)
data$city.L.100km <- as.factor(data$city.L.100km)
data$highway.L.100km <- as.factor(data$highway.L.100km)
data$country <- as.factor(data$country)
data$continent <- as.factor(data$continent)
path <- "C:/Users/Ivan/Desktop/5sem/sap/SAPproj/car_specifications.csv"
data <- read.csv(path)
data$fuel <- as.factor(data$fuel)
data$city.L.100km <- as.factor(data$city.L.100km)
data$highway.L.100km <- as.factor(data$highway.L.100km)
data$country <- as.factor(data$country)
data$continent <- as.factor(data$continent)
path <- "C:/Users/Ivan/Desktop/5sem/sap/SAPproj/car_specifications.csv"
data <- read.csv(path)
data$fuel <- as.factor(data$fuel)
data$city.L.100km <- as.factor(data$city.L.100km)
data$highway.L.100km <- as.factor(data$highway.L.100km)
data$country <- as.factor(data$country)
data$continent <- as.factor(data$continent)
model <- anova(data$city.L.100km ~ data$country)
model <- aov(data$city.L.100km ~ data$country)
type
type()
class(data$make)
path <- "C:/Users/Ivan/Desktop/5sem/sap/SAPproj/car_specifications.csv"
data <- read.csv(path)
data$fuel <- as.factor(data$fuel)
data$city.L.100km <- as.numeric(data$city.L.100km)
data$highway.L.100km <- as.numeric(data$highway.L.100km)
data$country <- as.factor(data$country)
data$continent <- as.factor(data$continent)
model <- aov(data$city.L.100km ~ data$country)
path <- "C:/Users/Ivan/Desktop/5sem/sap/SAPproj/car_specifications.csv"
data <- read.csv(path)
data$fuel <- as.factor(data$fuel)
data$city.L.100km <- as.numeric(data$city.L.100km)
data$highway.L.100km <- as.numeric(data$highway.L.100km)
data$country <- as.factor(data$country)
data$continent <- as.factor(data$continent)
model <- aov(data$city.L.100km ~ data$country)
summary(model)
model <- aov(data$highway.L.100km ~ data$country)
sumamry(model)
model <- aov(data$highway.L.100km ~ data$country)
summary(model)
Smodel <- aov(data$city.L.100km ~ data$continent)
summary(model)
model <- aov(data$city.L.100km ~ data$continent)
summary(model)
model <- aov(data$highwayy.L.100km ~ data$continent)
summary(model)
model <- aov(data$highwayy.L.100km ~ data$continent)
summary(model)
data$fuel <- as.factor(data$fuel)
data$city.L.100km <- as.numeric(data$city.L.100km)
data$highway.L.100km <- as.numeric(data$highway.L.100km)
data$country <- as.factor(data$country)
data$continent <- as.factor(data$continent)
model <- aov(data$city.L.100km ~ data$country)
summary(model)
model <- aov(data$highway.L.100km ~ data$country)
summary(model)
model <- aov(data$city.L.100km ~ data$continent)
summary(model)
model <- aov(data$highwayy.L.100km ~ data$continent)
summary(model)
model <- aov(data$highway.L.100km ~ data$continent)
summary(model)
q()
path <- "car_specifications.csv"
require(nortest)
data <- read.csv(path)
path <- "C:/Users/Ivan/Desktop/sapP/AnabolicStatistics/FuelConsumption/car_specifications.csv"
require(nortest)
data <- read.csv(path)
data$fuel <- as.factor(data$fuel)
data$city.L.100km <- as.numeric(data$city.L.100km)
data$highway.L.100km <- as.numeric(data$highway.L.100km)
data$country <- as.factor(data$country)
data$continent <- as.factor(data$continent)
countries <- unique(data$country)
continents <- unique(data$continent)
lillie.test(data$city.L.100km)
lillie.test(data$highway.L.100km)
for (country in countries) {
lillie.test(data$city.L.100km[data$country == country])
}
data
view(data)
View(dat)
View(data)
bartlett.test(data$city.L.100km ~ data$country)
es <- unique(data$country[-c("Italy","United Kingdom")])
countries
countries <- c("United States Of America","France","Germany","Japan","Sweden")
for (country in countries) {
lillie.test(data$city.L.100km[data$country == country])
}
for (country in countries) {
lillie.test(data$city.L.100km[data$country == country])
}
countries <- c("United States of America","France","Germany","Japan","Sweden")
for (country in countries) {
lillie.test(data$city.L.100km[data$country == country])
}
lillieTests = rep(0,5)
names(lillieTests) <- countries
lillieTests = rep(0,5)
names(lillieTests) <- countries
for (country in countries) {
lillieTests[country] = lillie.test(data$city.L.100km[data$country == country])
}
for (country in countries) {
lillieTests[country] = lillie.test(data$city.L.100km[data$country == country])
}
for (country in countries) {
lillie.test(data$city.L.100km[data$country == country])
}
for (country in countries) {
summary(lillie.test(data$city.L.100km[data$country == country]))
}
print(lillie.test(data$city.L.100km[data$country == country]))
for (country in countries) {
print(lillie.test(data$city.L.100km[data$country == country]))
}
bartlett.test(data$city.L.100km ~ data$country)
for(continent in continents) {
print(lillie.test((data$city.L.100km[data$continent == continent])))
}
for (country in countries) {
print(lillie.test(data$city.L.100km[data$country == country]))
print(lillie.test(data$highway.L.100km[data$country == country]))
}
for(continent in continents) {
print(lillie.test((data$city.L.100km[data$continent == continent])))
print(lillie.test((data$highway.L.100km[data$continent == continent])))
}
boxplot(data$city.L.100km ~ data$country)
boxplot(data$highway.L.100km ~ data$country)
boxplot(data$highway.L.100km ~ data$continent)
posthoc = TurkeyHSD(model)
setwd("C:/Users/Ivan/Desktop/sapP/AnabolicStatistics/FuelConsumption")
knitr::opts_chunk$set(echo = TRUE)
print(kruskalCity)
knitr::opts_chunk$set(echo = TRUE)
path <- "car_specifications.csv"
data <- read.csv(path)
data$continent = as.factor(data$continent)
data$country = as.factor(data$country)
head(data)
continents = unique(data$continent) #lista svih kontinenta
overallMeanCity = mean(data$city.L.100km)
overallMeanHighway = mean(data$highway.L.100km)
overallVarCity = var(data$city.L.100km)
overallVarHighway = var(data$highway.L.100km)
cat("\n")
print(sprintf("Aritmetička sredina potrošnje goriva u gradu: %f",overallMeanCity))
print(sprintf("Aritmetička sredina potrošnje goriva na autocestama: %f",overallMeanHighway))
print(sprintf("Sveukupna varijanca za gradove: %f",overallVarCity))
print(sprintf("Standardna devijacija: %f",sqrt(overallVarCity)))
print(sprintf("Sveukupna varijanca za autoceste: %f",overallVarHighway))
print(sprintf("Standardna devijacija: %f",sqrt(overallVarHighway)))
boxplot(data$city.L.100km ~ data$continent)
boxplot(data$highway.L.100km ~ data$continent)
require(nortest) #potrebna biblioteka
for (continent in continents) {
print(paste("For continent:",continent))
print(lillie.test(data$city.L.100km[data$continent == continent]))
print(lillie.test(data$highway.L.100km[data$continent == continent]))
titleHighway = paste(continent,", highway")
titleCity = paste(continent,", city")
hist(data$highway.L.100km[data$continent == continent],main=titleHighway)
hist(data$city.L.100km[data$continent == continent],main=titleCity)
}
qqnorm(data$highway.L.100km[data$continent == "Asia"],main="Asia, highways")
qqline(data$highway.L.100km[data$continent == "Asia"])
qqnorm(data$city.L.100km[data$continent == "Asia"],main = "Asia, cities")
qqline(data$city.L.100km[data$continent == "Asia"])
qqnorm(data$highway.L.100km[data$continent == "North America"],main = "NA,highways")
qqline(data$highway.L.100km[data$continent == "North America"])
qqnorm(data$city.L.100km[data$continent == "North America"],main = "NA, cities")
qqline(data$city.L.100km[data$continent == "North America"])
qqnorm(data$highway.L.100km[data$continent == "Europe"],main = "Europe, highways")
qqline(data$highway.L.100km[data$continent == "Europe"])
qqnorm(data$city.L.100km[data$continent == "Europe"],main = "Europe, cities")
qqline(data$city.L.100km[data$continent == "Europe"])
filteredDataHighway = list(Asia_Highway = data$highway.L.100km[data$continent == "Asia"], NA_Highway = data$highway.L.100km[data$continent == "North America"], Europe_Highway = data$highway.L.100km[data$continent == "Europe"])
filteredDataCity = list(Asia_City = data$city.L.100km[data$continent == "Asia"], NA_City = data$city.L.100km[data$continent == "North America"], Europe_City = data$city.L.100km[data$continent == "Europe"])
kruskalHighway = kruskal.test(filteredDataHighway)
kruskalCity = kruskal.test(filteredDataCity)
print(kruskalHighway)
print(kruskalCity)
bartlettCity=bartlett.test(data$city.L.100km ~ data$continent)
bartlettHighway = bartlett.test(data$highway.L.100km ~ data$continent)
print(bartlettCity)
print(bartlettHighway)
bartlettCity=bartlett.test(data$city.L.100km ~ data$continent)
bartlettHighway = bartlett.test(data$highway.L.100km ~ data$continent)
print(bartlettCity)
print(bartlettHighway)
for(continent in continents) {
print(var(data$highway.L.100km[data$continent == continent]))
print(var(data$city.L.100km[data$continent == continent]))
}
knitr::opts_chunk$set(echo = TRUE)
# Ucitavanje podataka
creditdata = read.csv('creditdata.csv')
summary(creditdata)
# Priprema podataka
creditdata$education = factor(creditdata$education,levels = c(1,2,3),labels = c('elementary','secondary','university'))
creditdata$marriage = factor(creditdata$marriage,levels = c(1,2),labels = c('single','married'))
creditdata$apartment = factor(creditdata$apartment,levels = c(1,2),labels = c('rent','own'))
creditdata$default = factor(creditdata$default,levels = c(0,1),labels = c(FALSE,TRUE))
summary(creditdata)
require(nortest)
lillie.test(creditdata$income)
lillie.test(creditdata$income[creditdata$education=='elementary'])
lillie.test(creditdata$income[creditdata$education=='secondary'])
lillie.test(creditdata$income[creditdata$education=='university'])
hist(creditdata$income[creditdata$education=='elementary'])
hist(creditdata$income[creditdata$education=='secondary'])
hist(creditdata$income[creditdata$education=='university'])
# Testiranje homogenosti varijance uzoraka Bartlettovim testom
bartlett.test(creditdata$income ~ creditdata$education)
var((creditdata$income[creditdata$education=='elementary']))
var((creditdata$income[creditdata$education=='secondary']))
var((creditdata$income[creditdata$education=='university']))
aC = aov(data$city.L.100km ~ data$continent)
aH = aov(data$highway.L.100km ~ data$continent)
summary(aC)
summary(aH)
aC = aov(data$city.L.100km ~ data$continent)
aH = aov(data$highway.L.100km ~ data$continent)
summary(aC)
print("==============================")
summary(aH)
aC = aov(data$city.L.100km ~ data$continent)
aH = aov(data$highway.L.100km ~ data$continent)
summary(aC)
print("============================================================")
summary(aH)
modelC = lm(data$city.L.100km ~ data$continent)
summary(modelC)
anova(summary)
modelC = lm(data$city.L.100km ~ data$continent)
summary(modelC)
print("============================================================")
modelH = lm(data$highway.L.100km ~ data$continent)
summary(modelH)
library(tidyverse)
library(lubridate)
knitr::opts_chunk$set(echo = TRUE)
knitr::opts_chunk$set(results = 'hold')
bartlettCity=bartlett.test(data$city.L.100km ~ data$continent)
bartlettHighway = bartlett.test(data$highway.L.100km ~ data$continent)
print(bartlettCity)
print(bartlettHighway)
for(continent in continents) {
print(var(data$highway.L.100km[data$continent == continent]))
print(var(data$city.L.100km[data$continent == continent]))
}
